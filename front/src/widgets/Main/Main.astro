---
import styles from "./Main.module.scss"
import leovinkTitle from "./const/leovinkLogo.webp"
import leovinkHorns from "./const/leovinkHorns.png"
import layerBaseImg from "./const/base-bg.webp"
import layerBaseImgLowRes from "./const/base-bg-low-res.webp"
import layerMiddleImg from "./const/layer-middle.webp"
import layerMiddleImgLowRes from "./const/layer-middle-low-res.webp"
import layerFrontImg from "./const/layer-front.webp"
import layerFrontImgLowRes from "./const/layer-front-low-res.webp"
import dungeonImg from "./const/dungeon2.webp"
import { ScrollIcon } from "shared/ui/ScrollIcon/ScrollIcon"
import "./Main.scss"
---

<header class={styles.mainWrapper}>
  <div id="main-container" class={styles.mainContainer}>
    <div class={styles.textContainer}>
      <img src={leovinkHorns} class={styles.horns} />
      <img src={leovinkTitle} alt="" class={styles.title} />
      <p class={styles.caption}>TATTOO & PIERCING</p>
      <p class={styles.est}>EST. 2010</p>
    </div>

    <div
      id="baseImg"
      class={`${styles.layerBase} ${styles.layer}`}
      style={{ backgroundImage: `url(${layerBaseImgLowRes})` }}
      data-src = {layerBaseImg}
    />
    
    <div
      id="middleImg"
      class={`${styles.layerMiddle} ${styles.layer}`}
      style={{ backgroundImage: `url(${layerMiddleImgLowRes})` }}
      data-src = {layerMiddleImg}
    />
    
    <div
      id="frontImg"
      class={`${styles.layerFront} ${styles.layer}`}
      style={{ backgroundImage: `url(${layerFrontImgLowRes})` }}
      data-src = {layerFrontImg}
    />

    <ScrollIcon client:load className={styles.scroll} />
  </div>
</header>
<div class={styles.dungeon} id="dungeon" style={{ backgroundImage: `url(${dungeonImg})` }}></div>
<slot />

<script is:inline>
const onScroll = throttle(() => {
  const scroll = window.scrollY
  document.documentElement.style.setProperty("--scrollTop", `${scroll}px`)
}, 50)

window.addEventListener("scroll", onScroll)

function throttle(func, delay) {
  let timeoutId
  let lastExecutedTime = 0

  return function (...args) {
    const currentTime = new Date().getTime()

    if (currentTime - lastExecutedTime < delay) {
      clearTimeout(timeoutId)
      timeoutId = setTimeout(() => {
        lastExecutedTime = currentTime
        func(...args)
      }, delay)
    } else {
      lastExecutedTime = currentTime
      func(...args)
    }
  }
}

function applyDataSrc(id) {
  const base = document.getElementById(id)
  const imgEl = new Image()
  imgEl.src = base.getAttribute("data-src")

  if (imgEl.complete) {
    base.style.backgroundImage = `url(${imgEl.src})`
  } else {
    imgEl.onload = () => {
      base.style.opacity = 0.1
      base.style.backgroundImage = `url(${imgEl.src})`
      base.style.opacity = 1
      base.classList.add("loaded")
    }
  }
}

applyDataSrc("baseImg")
applyDataSrc("middleImg")
applyDataSrc("frontImg")
</script>